name: CI on MySQL Container & CD with Gradle

on:
  push:
    branches: [ "be-dev" ]
  workflow_dispatch:

env:
  RESOURCE_PATH: ./backend/src/main/resources/application.yaml
  
jobs:
  setup-mysql-and-test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword

        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install MySQL client
        run: sudo apt-get install -y mysql-client

      - name: Connect and fetch data from MySQL
        run: |
          mysql -h127.0.0.1 -uroot -prootpassword -e "source backend/database/init.sql;"

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Set yml file for test database connection
        uses: microsoft/variable-substitution@v1
        with:
          files: ${{ env.RESOURCE_PATH }} 
        env:
          spring.datasource.url: jdbc:mysql://localhost:3306/88heyTest
          spring.datasource.username: root
          spring.datasource.password: rootpassword

      - name: Grant execute permission for gradlew
        run: chmod +x ./backend/gradlew

      - name: Run tests with Gradle
        run: ./gradlew test
        working-directory: ./backend

      - name: Set yml file for real server database connection
        uses: microsoft/variable-substitution@v1
        with:
          files: ${{ env.RESOURCE_PATH }} 
        env:
          spring.datasource.url: ${{ secrets.DB_HOST }} 
          spring.datasource.username: ${{ secrets.DB_USERNAME }} 
          spring.datasource.password: ${{ secrets.DB_PASSWORD }} 

      - name: Build with Gradle
        run: ./gradlew bootJar

      - name: Upload Build Jar
        uses: actions/upload-artifact@v2
        with:
          name: gradleJar
          path: backend/build/libs/*.jar

  deploy:
    needs: setup-mysql-and-test
    runs-on: ubuntu-latest

    steps:

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: gradleJar

      - name: Copy files via SSH
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "*.jar"
          target: "~"

  SSH:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: ssh to ec2
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          script: |
            sudo fuser -k 8080/tcp
            sudo nohup java -jar ~/*.jar > nohup.out 2> nohup.err < /dev/null &
            exit